<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="9/5/2025 5:54:30 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-AGJD8N8"
  DTS:CreatorName="DESKTOP-AGJD8N8\Lenovo PC"
  DTS:DTSID="{43DAC54F-2361-49B7-8E6F-93560D1A6A3C}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5685.2"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="2"
  DTS:VersionGUID="{F02F6882-D404-45B4-8720-084737BF1A7A}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[MyDBConnection]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{CEE70C13-4113-47CE-B928-0FB68A86E248}"
      DTS:ObjectName="MyDBConnection">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=DESKTOP-AGJD8N8;Initial Catalog=ssis7;Integrated Security=True;Application Name=SSIS-Package-{CEE70C13-4113-47CE-B928-0FB68A86E248}DESKTOP-AGJD8N8.ssis7;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5F143733-942B-46F9-B11B-4B937F05DDAF}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelFilePath">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8E4B9930-8CBE-4693-9681-D9C0AC2A8395}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\Lenovo PC\Desktop\MAAB\SSIS\source</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{C8CDE190-BE57-40E2-87B4-E6608BDF50DC}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachFileEnumerator"
        DTS:DTSID="{4424F318-3DEB-4371-A839-73E2D31FB15A}"
        DTS:ObjectName="{4424F318-3DEB-4371-A839-73E2D31FB15A}">
        <DTS:ObjectData>
          <ForEachFileEnumeratorProperties>
            <FEFEProperty
              Folder="C:\Users\Lenovo PC\Desktop\MAAB\SSIS\source" />
            <FEFEProperty
              FileSpec="*.xlsx" />
            <FEFEProperty
              FileNameRetrievalType="0" />
            <FEFEProperty
              Recurse="0" />
          </ForEachFileEnumeratorProperties>
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Process Excel File"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{268C1269-33C4-4725-9BA0-39B9AE3A441B}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Process Excel File"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_1e972675de5d4a22966b436c28eee358"
              VSTAMajorVersion="16"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::ExcelFilePath,User::FolderPath">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using Microsoft.SqlServer.Dts.Runtime;
using System;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.IO;
using System.Windows.Forms;
#endregion

namespace ST_1e972675de5d4a22966b436c28eee358
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        // Add these namespaces at top of the script file (if not already present):
        // using System;
        // using System.Data;
        // using System.IO;
        // using System.Data.OleDb;
        // using System.Data.SqlClient;
        // using Microsoft.SqlServer.Dts.Runtime;

        public void Main()
        {
            bool fire = false;
            string excelPath = Dts.Variables["User::ExcelFilePath"].Value.ToString();
            string outFolder = Dts.Variables["User::FolderPath"].Value.ToString();
            string errorFile = Dts.Variables["User::FolderPath"].Value.ToString();

            // Ensure output folder exists
            Directory.CreateDirectory(outFolder);

            // Excel ACE connection � .xlsx
            string excelConnStr = $"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={excelPath};Extended Properties=\"Excel 12.0 Xml;HDR=YES;IMEX=1\";";

            // Acquire SQL connection from the ADO.NET connection manager (MyDBConnection)
            object rawSqlConn = null;
            var connMgr = Dts.Connections["MyDBConnection"];
            try
            {
                rawSqlConn = connMgr.AcquireConnection(Dts.Transaction); // returns SqlConnection for ADO.NET
                var sqlConn = rawSqlConn as SqlConnection;
                if (sqlConn == null)
                {
                    // If not a SqlConnection, build a new connection as fallback (you can change as needed)
                    // But usually AcquireConnection returns SqlConnection
                    throw new Exception("Failed to acquire SQL connection from MyDBConnection.");
                }

                using (var excelConn = new OleDbConnection(excelConnStr))
                {
                    excelConn.Open();

                    // Get sheet list
                    DataTable sheets = excelConn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    if (sheets == null || sheets.Rows.Count == 0)
                    {
                        File.AppendAllText(errorFile, $"{DateTime.Now}: No sheets found in file {excelPath}{Environment.NewLine}");
                    }
                    else
                    {
                        foreach (DataRow row in sheets.Rows)
                        {
                            string sheetNameRaw = row["TABLE_NAME"].ToString();
                            // Accept sheet names ending with $ or $'
                            if (!sheetNameRaw.EndsWith("$") && !sheetNameRaw.EndsWith("$'")) continue;

                            // Clean sheet name for SELECT and for file naming
                            string cleanSheetName = sheetNameRaw.Trim('\'').TrimEnd('$');

                            try
                            {
                                // Read sheet into DataTable
                                string select = $"SELECT * FROM [{sheetNameRaw}]";
                                using (var da = new OleDbDataAdapter(select, excelConn))
                                {
                                    var dt = new DataTable();
                                    da.Fill(dt);

                                    // Write to text file: outFolder\cleanSheetName.txt
                                    string txtPath = Path.Combine(outFolder, cleanSheetName + ".txt");
                                    using (var sw = new StreamWriter(txtPath, false))
                                    {
                                        // Write header (ID,Name)
                                        sw.WriteLine("ID,Name");
                                        foreach (DataRow dr in dt.Rows)
                                        {
                                            // Basic safety: check expected columns
                                            if (dt.Columns.Count < 2) continue;
                                            string id = dr[0]?.ToString().Trim() ?? "";
                                            string name = dr[1]?.ToString().Trim() ?? "";
                                            sw.WriteLine($"{id},{name}");
                                        }
                                    }

                                    // Insert into SQL table dbo.Customer
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        if (dt.Columns.Count < 2) continue;
                                        string idStr = dr[0]?.ToString().Trim();
                                        string name = dr[1]?.ToString().Trim();

                                        // Validate parseable ID
                                        int idVal = 0;
                                        if (!Int32.TryParse(idStr, out idVal))
                                        {
                                            // Log parse error and continue
                                            File.AppendAllText(errorFile, $"{DateTime.Now}: Invalid ID '{idStr}' in file {excelPath}, sheet {cleanSheetName}{Environment.NewLine}");
                                            continue;
                                        }

                                        using (var cmd = new SqlCommand("INSERT INTO dbo.Customer (ID, Name, SourceFile, SheetName) VALUES (@ID, @Name, @SourceFile, @SheetName)", sqlConn))
                                        {
                                            cmd.Parameters.AddWithValue("@ID", idVal);
                                            cmd.Parameters.AddWithValue("@Name", name ?? (object)DBNull.Value);
                                            cmd.Parameters.AddWithValue("@SourceFile", Path.GetFileName(excelPath));
                                            cmd.Parameters.AddWithValue("@SheetName", cleanSheetName);
                                            cmd.ExecuteNonQuery();
                                        }
                                    }

                                    Dts.Events.FireInformation(0, "ProcessExcel", $"Saved '{cleanSheetName}.txt' and inserted {dt.Rows.Count} rows from sheet {cleanSheetName} in file {Path.GetFileName(excelPath)}", "", 0, ref fire);
                                }
                            }
                            catch (Exception sheetEx)
                            {
                                File.AppendAllText(errorFile, $"{DateTime.Now}: Error processing sheet {sheetNameRaw} in file {excelPath} : {sheetEx.Message}{Environment.NewLine}");
                            }
                        } // foreach sheet
                    } // else sheets exist

                    excelConn.Close();
                } // using excelConn

                // success
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                File.AppendAllText(errorFile, $"{DateTime.Now}: Error processing file {excelPath} : {ex.ToString()}{Environment.NewLine}");
                Dts.Events.FireError(0, "ProcessExcel", ex.Message, "", 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            finally
            {
                // Release SQL connection if acquired
                try
                {
                    if (rawSqlConn != null)
                        connMgr.ReleaseConnection(rawSqlConn);
                }
                catch { /* ignore */ }
            }
        }


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="ST_1e972675de5d4a22966b436c28eee358.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{bcb2648c-1f1c-4d2a-a59a-38723c2311f2}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_1e972675de5d4a22966b436c28eee358</RootNamespace>
    <AssemblyName>ST_1e972675de5d4a22966b436c28eee358</AssemblyName>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask"
                           HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}"
                           ApplicationType="usd"
                           Language="cs"
                           TemplatesPath=""
                           DebugInfoCommandLine=""
                           DebugInfoWorkingDir=""
                           IconImageList=""/>
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:Language>msBuild</msb:Language>
    <msb:CodeName>ST_1e972675de5d4a22966b436c28eee358</msb:CodeName>
    <msb:DisplayName>ST_1e972675de5d4a22966b436c28eee358</msb:DisplayName>
    <msb:ProjectId>{85385C10-8E8B-4A83-AB86-C7FBC7993F1B}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_1e972675de5d4a22966b436c28eee358.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e972675de5d4a22966b436c28eee358.Properties.Settings.get_Default():ST_1e972675de5d4a22966b436c28eee358.Properties.Sett" +
    "ings")]

namespace ST_1e972675de5d4a22966b436c28eee358.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_1e972675de5d4a22966b436c28eee358")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_1e972675de5d4a22966b436c28eee358")]
[assembly: AssemblyCopyright("Copyright @  2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e972675de5d4a22966b436c28eee358.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e972675de5d4a22966b436c28eee358.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e972675de5d4a22966b436c28eee358.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_1e972675de5d4a22966b436c28eee358.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_1e972675de5d4a22966b436c28eee358.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_1e972675de5d4a22966b436c28eee358.dll">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
rgYGABEG4QYGAO4FGgUWAB8CdQQWAIACdQQWAPABBQUGADQCwQYKAGMEOgQOAH4HRgEOAPMARgEG
ALMINAAGAPoFNAAGAAYEyAQOALQHRgESAJIF2wUSAIwAcQAGAJcAyAQSAH0FZQASANUBZQAGAD0B
yAQGAEcIyAQGACwBNAAGAAgGyAQSAG8G2wUGAA0ENAAGAGEGNAASAFEFZQAGAAEAyAQSAGYFMQgS
AEcGMQgGALgEyAQSAKQA2wUKADMGOgQGAIQByAQGAAgByAQGAJQIPwUAAAAAKwAAAAAAAQABAAEA
EADqBAcAOQABAAEAAAAQAOgGRAc9AAEAAwAAARAAiAdEB4UAAwAHAAMBAADfBwAAbQAEAAoAEQDZ
BHABEQCpAXQBEQC5AHgBBgZdAHwBVoDPB38BVoCJAX8BUCAAAAAAhgDwBAYAAQDQJgAAAACGGKEG
BgABANgmAAAAAIMYoQYGAAEA4CYAAAAAkwgNBoMBAQAMJwAAAACTCJEBiAEBABMnAAAAAJMInQGN
AQEAGycAAAAAlggWCJMBAgAiJwAAAACGGKEGBgACAConAAAAAJEYpwaYAQIAAAABAOQDCQChBgEA
EQChBgYAGQChBgoAKQChBhAAMQChBhAAOQChBhAAQQChBhAASQChBhAAUQChBhAAWQChBhAAYQCh
BhAAaQChBgYA4QChBgYAAQGhBhUAEQGhBgYAcQDXB0kAGQF6B08AIQG/BFUAKQHNA1wAeQAEBGAA
MQGtCGQAQQEBCGsAGQGwB3IASQG/BHgAGQEvBVwAgQCfBX4A0QChBhAAkQChBhAAUQHlBAYAWQFz
B4MAkQDVAIgAmQD4B5IAcQFfCJgAeQGACJwAgQFwAaIAQQEICKYAiQFyCK4AcQGTBrQAoQBTCFwA
uQC/BLkAQQESBL4AQQHPBMMAQQGcAMMAqQChBskAmQChBgYAmQGzBNAAQQEBCNYAoQF8AdYAsQCh
BtwAqQFmARAAmQCRB+IAuQC/BOgAQQHPBGAAoQBpCO0AwQAOAgYAuQEWAvEAQQEICPgAyQChBv8A
yQDABwYBwQHXAwwB0QHeAxQBoQExARkB2QGdCJgAGQHtBx4B4QH1BCQB0QDJAGAAUQEIAgYAGQEi
CAEA4QF9Bi8BgQCxBTgBcQChBgYAeQChBgYA6QEaAT0B6QGQCEYB6QChBkwBCQGhBgYACAAUAGYB
CAAYAGsBKQBzANMBLgALAKsBLgATALQBLgAbANMBLgAjANwBLgArAAUCLgAzAAUCLgA7AAUCLgBD
ANwBLgBLAAsCLgBTAAUCLgBbACICQwBjAGsBSQBzANMBYQB7AGsBYwBrAGsBGwADAAEABAADAAAA
EQacAQAAsQGhAQAAGgimAQIABAADAAIABQAFAAEABgAFAAIABwAHAASAAAABAAAAoyQKgAAAAAAA
AAcAAAAEAAAAAAAAAAAAAABUAYMAAAAAABAAAAAAAAAAAAAAAF0BGwQAAAAAEAAAAAAAAAAAAAAA
XQE+AAAAAAAEAAAAAAAAAAAAAABUAWUAAAAAAAQAAAAAAAAAAAAAAFQByAQAAAAAAAAAAAEAAADy
BgAABQACAAAAAAAASW50MzIAU1RfMWU5NzI2NzVkZTVkNGEyMjk2NmI0MzZjMjhlZWUzNTgAPE1v
ZHVsZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFN5
c3RlbS5EYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29ybGliAE9sZURiU2NoZW1hR3VpZABUcmlt
RW5kAERiQ29tbWFuZABTcWxDb21tYW5kAGRlZmF1bHRJbnN0YW5jZQBnZXRfTWVzc2FnZQBHZXRP
bGVEYlNjaGVtYVRhYmxlAERhdGFUYWJsZQBWYXJpYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlw
ZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWxlAEdldEZpbGVOYW1lAERhdGVUaW1lAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAV3JpdGVMaW5lAGdldF9OZXdMaW5lAENvbWJpbmUA
VHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RB
UlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGlj
YXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBUcnlQYXJzZQBFZGl0b3JCcm93c2FibGVT
dGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmli
dXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5
VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3Jr
QXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0
aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9k
dWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50
cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGli
aWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAEFkZFdpdGhWYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGlt
ZS5WZXJzaW9uaW5nAFRvU3RyaW5nAFBhdGgARW5kc1dpdGgATWljcm9zb2Z0LlNxbFNlcnZlci5T
Y3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0
T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzFlOTcyNjc1ZGU1ZDRhMjI5NjZi
NDM2YzI4ZWVlMzU4LmRsbABGaWxsAERCTnVsbABnZXRfSXRlbQBTeXN0ZW0AVHJpbQBFbnVtAHJl
c291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBGaXJlSW5mb3JtYXRpb24AU3lzdGVtLkNvbmZpZ3Vy
YXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AZ2V0X1RyYW5zYWN0aW9uAFN5c3RlbS5SZWZsZWN0
aW9uAERhdGFDb2x1bW5Db2xsZWN0aW9uAFNxbFBhcmFtZXRlckNvbGxlY3Rpb24ARGF0YVJvd0Nv
bGxlY3Rpb24AT2xlRGJDb25uZWN0aW9uAEFjcXVpcmVDb25uZWN0aW9uAFJlbGVhc2VDb25uZWN0
aW9uAFNxbENvbm5lY3Rpb24ARXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBDdWx0dXJlSW5m
bwBEaXJlY3RvcnlJbmZvAENoYXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdl
cgBFdmVudHNPYmplY3RXcmFwcGVyAFNxbFBhcmFtZXRlcgBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRl
cgBPbGVEYkRhdGFBZGFwdGVyAEZpcmVFcnJvcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5j
dG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2
aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzFlOTcyNjc1ZGU1ZDRhMjI5NjZiNDM2YzI4ZWVlMzU4
LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF8xZTk3MjY3
NWRlNWQ0YTIyOTY2YjQzNmMyOGVlZTM1OC5Qcm9wZXJ0aWVzAFRhYmxlcwBnZXRfVmFyaWFibGVz
AFNldHRpbmdzAGdldF9Db2x1bW5zAFN5c3RlbS5Db2xsZWN0aW9ucwBnZXRfQ29ubmVjdGlvbnMA
Z2V0X1BhcmFtZXRlcnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMAZ2V0X0V2ZW50cwBn
ZXRfUm93cwBDb25jYXQARm9ybWF0AE9iamVjdABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABT
eXN0ZW0uRGF0YS5TcWxDbGllbnQARW52aXJvbm1lbnQAZ2V0X0N1cnJlbnQAZ2V0X0NvdW50AE1v
dmVOZXh0AEFwcGVuZEFsbFRleHQAZ2V0X05vdwBEYXRhUm93AGdldF9Bc3NlbWJseQBFeGVjdXRl
Tm9uUXVlcnkAQ3JlYXRlRGlyZWN0b3J5AAAAAAAnVQBzAGUAcgA6ADoARQB4AGMAZQBsAEYAaQBs
AGUAUABhAHQAaAAAIVUAcwBlAHIAOgA6AEYAbwBsAGQAZQByAFAAYQB0AGgAAF1QAHIAbwB2AGkA
ZABlAHIAPQBNAGkAYwByAG8AcwBvAGYAdAAuAEEAQwBFAC4ATwBMAEUARABCAC4AMQAyAC4AMAA7
AEQAYQB0AGEAIABTAG8AdQByAGMAZQA9AABrOwBFAHgAdABlAG4AZABlAGQAIABQAHIAbwBwAGUA
cgB0AGkAZQBzAD0AIgBFAHgAYwBlAGwAIAAxADIALgAwACAAWABtAGwAOwBIAEQAUgA9AFkARQBT
ADsASQBNAEUAWAA9ADEAIgA7AAAdTQB5AEQAQgBDAG8AbgBuAGUAYwB0AGkAbwBuAABrRgBhAGkA
bABlAGQAIAB0AG8AIABhAGMAcQB1AGkAcgBlACAAUwBRAEwAIABjAG8AbgBuAGUAYwB0AGkAbwBu
ACAAZgByAG8AbQAgAE0AeQBEAEIAQwBvAG4AbgBlAGMAdABpAG8AbgAuAABHewAwAH0AOgAgAE4A
bwAgAHMAaABlAGUAdABzACAAZgBvAHUAbgBkACAAaQBuACAAZgBpAGwAZQAgAHsAMQB9AHsAMgB9
AAAVVABBAEIATABFAF8ATgBBAE0ARQAAAyQAAAUkACcAAR9TAEUATABFAEMAVAAgACoAIABGAFIA
TwBNACAAWwAAA10AAAkuAHQAeAB0AAAPSQBEACwATgBhAG0AZQAAAQADLAAAX3sAMAB9ADoAIABJ
AG4AdgBhAGwAaQBkACAASQBEACAAJwB7ADEAfQAnACAAaQBuACAAZgBpAGwAZQAgAHsAMgB9ACwA
IABzAGgAZQBlAHQAIAB7ADMAfQB7ADQAfQABgM9JAE4AUwBFAFIAVAAgAEkATgBUAE8AIABkAGIA
bwAuAEMAdQBzAHQAbwBtAGUAcgAgACgASQBEACwAIABOAGEAbQBlACwAIABTAG8AdQByAGMAZQBG
AGkAbABlACwAIABTAGgAZQBlAHQATgBhAG0AZQApACAAVgBBAEwAVQBFAFMAIAAoAEAASQBEACwA
IABAAE4AYQBtAGUALAAgAEAAUwBvAHUAcgBjAGUARgBpAGwAZQAsACAAQABTAGgAZQBlAHQATgBh
AG0AZQApAAAHQABJAEQAAAtAAE4AYQBtAGUAABdAAFMAbwB1AHIAYwBlAEYAaQBsAGUAABVAAFMA
aABlAGUAdABOAGEAbQBlAAAZUAByAG8AYwBlAHMAcwBFAHgAYwBlAGwAAICBUwBhAHYAZQBkACAA
JwB7ADAAfQAuAHQAeAB0ACcAIABhAG4AZAAgAGkAbgBzAGUAcgB0AGUAZAAgAHsAMQB9ACAAcgBv
AHcAcwAgAGYAcgBvAG0AIABzAGgAZQBlAHQAIAB7ADIAfQAgAGkAbgAgAGYAaQBsAGUAIAB7ADMA
fQABaXsAMAB9ADoAIABFAHIAcgBvAHIAIABwAHIAbwBjAGUAcwBzAGkAbgBnACAAcwBoAGUAZQB0
ACAAewAxAH0AIABpAG4AIABmAGkAbABlACAAewAyAH0AIAA6ACAAewAzAH0AewA0AH0AAE97ADAA
fQA6ACAARQByAHIAbwByACAAcAByAG8AYwBlAHMAcwBpAG4AZwAgAGYAaQBsAGUAIAB7ADEAfQAg
ADoAIAB7ADIAfQB7ADMAfQAAcVMAVABfADEAZQA5ADcAMgA2ADcANQBkAGUANQBkADQAYQAyADIA
OQA2ADYAYgA0ADMANgBjADIAOABlAGUAZQAzADUAOAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBS
AGUAcwBvAHUAcgBjAGUAcwAAAC5i8yVUAG9Dpf6EC9NGVMYABCABAQgDIAABBSABARERBCABAQ4F
IAEBEX0tBxwCDg4ODhwSQRJFEkkSTRJRDg4SVRJNElkSURJdDg4SYRJdDg4IEmUSaRJpBSAAEoCN
BSAAEoCRBiABEoCVHAMgABwDIAAOBgABEoCdDgYAAw4ODg4FIAASgKUFIAESQRwEIAEcHAQGEYCx
CSACEk0RgLEdHAUgABKAtQMgAAgFAAARgL0DAAAOBwAEDg4cHBwFAAIBDg4EIAASUQQgARwOBCAB
Ag4FIAEOHQMGIAIBDhJJBSABCBJNBQACDg4OBSACAQ4CBSAAEoDZBCABHAgDIAACBgACAg4QCAYA
Ag4OHRwGIAIBDhJFBSAAEoDhByACEoDlDhwEBhKA6QQAAQ4OBSAAEoDxCiAGAQgODg4IEAIIIAUC
CA4ODggEIAEBHAgAARKA9RGA+QUgABKA/QcgAgEOEoD9CLd6XFYZNOCJCImEXc2AgMyRBAAAAAAE
AQAAAAMGEnUDBhJ5AwYSEAIGCAMGERQEAAASdQQAABJ5BQABARJ5BAAAEhADAAABBAgAEnUECAAS
eQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgB
ACNTVF8xZTk3MjY3NWRlNWQ0YTIyOTY2YjQzNmMyOGVlZTM1OAAABQEAAAAAFgEAEUNvcHlyaWdo
dCBAICAyMDI1AABNAQAcLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjcuMgEAVA4URnJhbWV3b3Jr
RGlzcGxheU5hbWUULk5FVCBGcmFtZXdvcmsgNC43LjK0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5S
ZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1
cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3Vy
Y2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAED8AAAAAAAAAAAAA
Kj8AAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAABw/AAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNj
b3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhA
AAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEACoCjJAAAAQAKgKMkPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQA
YgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBh
AG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwAxAGUAOQA3ADIANgA3ADUAZABlADUAZAA0AGEAMgAyADkANgA2AGIANAAzADYAYwAyADgAZQBl
AGUAMwA1ADgAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOQAzADcA
OQAuADMAMgA3ADcAOAAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAx
AGUAOQA3ADIANgA3ADUAZABlADUAZAA0AGEAMgAyADkANgA2AGIANAAzADYAYwAyADgAZQBlAGUA
MwA1ADgALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBw
AHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIANQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUA
bQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAA
AFMAVABfADEAZQA5ADcAMgA2ADcANQBkAGUANQBkADQAYQAyADIAOQA2ADYAYgA0ADMANgBjADIA
OABlAGUAZQAzADUAOAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABT
AFQAXwAxAGUAOQA3ADIANgA3ADUAZABlADUAZAA0AGEAMgAyADkANgA2AGIANAAzADYAYwAyADgA
ZQBlAGUAMwA1ADgAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADkAMwA3ADkALgAzADIANwA3ADgAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADkAMwA3ADkALgAzADIANwA3ADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAPD8AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{93AB4056-7617-4070-B781-7EA084E0C4CF}"
          DTS:ObjectName="{93AB4056-7617-4070-B781-7EA084E0C4CF}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::ExcelFilePath" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="164,41.6"
          Id="Package\Foreach Loop Container\Process Excel File"
          TopLeft="48.9666598824994,33.8666654131148" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="232,130.4"
          Size="232,173.6"
          Id="Package\Foreach Loop Container"
          TopLeft="74.9999959021809,103.133332616157" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>